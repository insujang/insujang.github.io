<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sgx on Better Tomorrow with Computer Science</title>
    <link>/tags/sgx/</link>
    <description>Recent content in sgx on Better Tomorrow with Computer Science</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Oct 2017 15:26:34 +0900</lastBuildDate><atom:link href="/tags/sgx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intel SGX Sealing</title>
      <link>/2017-10-09/intel-sgx-sealing/</link>
      <pubDate>Mon, 09 Oct 2017 15:26:34 +0900</pubDate>
      
      <guid>/2017-10-09/intel-sgx-sealing/</guid>
      <description>There is a few information related to sealing, even no detailed explanation in the paper: Intel SGX explaned. All in this post are from Intel, with a little thought of mine.
Sealing # Sealing is a service that Intel provides with Intel SGX technology for secure data saving.
Intel SGX provides protections data only if it is in the enclave, part of main memory. Therefore, when the enclave process exits, the enclave will be destroyed and any data that is secured whithin the enclave will be lost.</description>
    </item>
    
    <item>
      <title>Implementing and Using Custom Intel SGX Trusted Library 2</title>
      <link>/2017-06-01/implementing-and-using-custom-intel-sgx-trusted-library-2/</link>
      <pubDate>Thu, 01 Jun 2017 19:58:54 +0900</pubDate>
      
      <guid>/2017-06-01/implementing-and-using-custom-intel-sgx-trusted-library-2/</guid>
      <description>In the previous post, I showed how to link a trusted function that can be called insdie the enclave.
However, Intel SGX provides a way to import EDL to make a library have an ECALL. The post from Intel is [here].
1. Implementing a trusted SGX library # As we do in the previous post, make a trusted library.
   {: .center-image}
So our simple trusted SGX library has a function named ecall_testlib_sample.</description>
    </item>
    
    <item>
      <title>Implementing and Using Custom Intel SGX Trusted Library</title>
      <link>/2017-05-31/implementing-and-using-custom-intel-sgx-trusted-library/</link>
      <pubDate>Wed, 31 May 2017 18:42:44 +0900</pubDate>
      
      <guid>/2017-05-31/implementing-and-using-custom-intel-sgx-trusted-library/</guid>
      <description>Intel SGX Trusted Library # Trusted libraries are libraries that are linked to a SGX program, and used inside an enclave. Hence, it should follow SGX enclave restrictions to be used.
According to Intel SGX SDK document, restrictions are as follow.
 Trusted libraries are static libraries that linked with the enclave binary. This functions/objects can only be used from within the enclave. (=ECALL cannot be implemented in a library) We should not link the enclave with any trusted library including C/C++ standard libraries.</description>
    </item>
    
    <item>
      <title>Hooking an SGX ENCLS Leaf Function Call from KVM</title>
      <link>/2017-04-21/hooking-an-sgx-encls-leaf-function-call-from-kvm/</link>
      <pubDate>Fri, 21 Apr 2017 20:36:41 +0900</pubDate>
      
      <guid>/2017-04-21/hooking-an-sgx-encls-leaf-function-call-from-kvm/</guid>
      <description>Environment #  Host: Ubuntu 14.04.5 LTS, Linux kernel 4.6.0, Intel Core-i7 6700 Skylake processor Guest: Ubuntu 14.04.4 LTS, Linux kernel 3.16.5, QEMU-KVM based virtual machine (using Intel VT-x)  1. ENCLS #   SGX Programming Reference, Section 5.2.1
  ENCLS instruction is used to execute an enclave system function (privileged) of specified leaf number.
  Software specifies the leaf function by setting the appropriate value in the register EAX as input.</description>
    </item>
    
    <item>
      <title>Intel SGX Instructions in Enclave Initialization</title>
      <link>/2017-04-05/intel-sgx-instructions-in-enclave-initialization/</link>
      <pubDate>Wed, 05 Apr 2017 22:13:25 +0900</pubDate>
      
      <guid>/2017-04-05/intel-sgx-instructions-in-enclave-initialization/</guid>
      <description>1. ECREATE #  [Intel SGX Explained p63] Section 5.3.1. Creation [Programming References p21] Section 5.3. ECREATE  An enclave is born when the system software issues the ECREATE instruction, which turns a free EPC page into the SECS for the new enclave.
ECREATE copies an SECS structure outside the EPC into an SECS page inside the EPC. The internal structure of SECS is not accessible to software.
Software sets the following fields in the source structure: SECS:BASEADDR, SECS:SIZE, and ATTRIBUTES.</description>
    </item>
    
    <item>
      <title>Intel SGX Protection Mechanism</title>
      <link>/2017-04-03/intel-sgx-protection-mechanism/</link>
      <pubDate>Mon, 03 Apr 2017 14:09:50 +0900</pubDate>
      
      <guid>/2017-04-03/intel-sgx-protection-mechanism/</guid>
      <description>All Figure numbers are same with those in the paper.
Glossary #  PMH: Page Miss Handler. MMU: Memory Management Unit. TLB: Translation Look-aside Buffer. FSM: Finite State Machine. EPC: Enclave Page Cache. EPCM: Enclave Page Cache Map. PRM: Processor Reserved Memory. ELRANGE: Enclave Linear Address Range.  Address Translation # Concepts #  Section 2.5.1 Address Translation Concepts
 System software relies on the CPU&amp;rsquo;s address translation mechanism for implementing isolation among less privileged pieces of software.</description>
    </item>
    
  </channel>
</rss>
